{"version":3,"sources":["hooks/http.hook.js","context/AuthContext.js","Pages/AuthPage.js","hooks/message.hook.js","Pages/CreatePage.js","components/LinkCard.js","Pages/DetailPage.js","components/LinksList.js","Pages/LinksPage.js","components/navbar.js","App.js","hooks/auth.hook.js","routs.js","serviceWorker.js","index.js"],"names":["useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","message","clearError","noop","AuthContext","createContext","token","userId","login","logout","isAuthenticated","AuthPage","auth","useContext","text","alert","email","password","form","setForm","useEffect","changeHandler","event","target","name","value","registerHandler","loginHandler","Container","className","Card","style","width","Body","Title","InputGroup","FormControl","placeholder","id","type","aria-describedby","onChange","Button","onClick","disabled","CreatePage","history","useHistory","link","setLink","pressHandler","key","from","Authorization","push","_id","console","log","e","onKeyPress","LinkCard","href","to","clicks","Date","date","toLocaleDateString","DetailPage","linkId","useParams","getLink","fetched","LinksList","links","Table","map","index","LinksPage","setLinks","fetchLinks","NavBar","Navbar","bg","variant","Brand","src","alt","Nav","Link","preventDefault","App","setToken","setUserId","jwtToken","localStorage","setItem","removeItem","parse","getItem","useAuth","routes","path","exact","useRouts","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.14c31a36.chunk.js","sourcesContent":["import{useState,useCallback}  from \"react\";\r\n\r\nexport const useHttp = () =>{\r\n    const[loading,setLoading] = useState(false);\r\n    const[error,setError] = useState(null);\r\n    const request = useCallback(async (url,method=\"GET\",body=null,headers={}) => {\r\n        setLoading(true)\r\n        try {\r\n            if(body){\r\n                body = JSON.stringify(body)\r\n                headers[\"Content-Type\"] = \"application/json\"\r\n            }\r\n         const response =  await fetch(url,{method,body,headers});\r\n         const data = await response.json();\r\n         if (!response.ok){\r\n             throw new Error(data.message || \"something went wrong\")\r\n         }\r\n         setLoading(false);\r\n         return data\r\n        }catch (e) {\r\n            setLoading(false)\r\n            setError(e.message)\r\n            throw e\r\n        }\r\n    },[]);\r\n    const clearError =useCallback (() => setError(null),[]);\r\n    return{loading,error,request,clearError}\r\n};","import {createContext} from \"react\";\r\n\r\nfunction noop() {}\r\n\r\nexport const AuthContext = createContext({\r\n    token: null,\r\n    userId: null,\r\n    login: noop,\r\n    logout: noop,\r\n    isAuthenticated: false\r\n});","import React, {useState, useEffect, useContext} from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'materialize-css';\r\nimport {Container,Card,Button,InputGroup,FormControl} from \"react-bootstrap\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {useMessage} from \"../hooks/message.hook\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\n\r\nexport const AuthPage = () => {\r\n    const auth = useContext(AuthContext)\r\n    const message = useMessage();\r\n    const{loading,request,error,clearError}=useHttp();\r\n    const[form,setForm]=useState({email:\"\",password:\"\"});\r\n    useEffect(()=>{\r\n      if(error){\r\n          message(error)\r\n          clearError()\r\n      }\r\n    },[error,message,clearError])\r\n\r\n    const changeHandler = event => {\r\n        setForm({...form,[event.target.name]: event.target.value})\r\n    };\r\n    const registerHandler = async () => {\r\n        try {\r\n            const data = await request(\"/api/auth/register\",\"POST\",{...form})\r\n        }catch (e) {}\r\n    }\r\n    const loginHandler = async () => {\r\n        try {\r\n            const data = await request(\"/api/auth/login\",\"POST\",{...form})\r\n            auth.login(data.token,data.userId)\r\n        }catch (e) {}\r\n    }\r\n    return (\r\n        <Container className=\"align-items-center\">\r\n        <Card style={{ width: '28rem' }} className=\"d-inline-block\">\r\n            <Card.Body>\r\n                <Card.Title>REGISTRATION.......................................SIGN IN </Card.Title>\r\n                <InputGroup>\r\n                    <FormControl\r\n                        placeholder=\"emil\"\r\n                        id=\"email\"\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        aria-describedby=\"basic-addon1\"\r\n                        onChange={changeHandler}\r\n                    />\r\n                    <FormControl\r\n                        placeholder=\"Password\"\r\n                        id=\"Password\"\r\n                        type=\"Password\"\r\n                        name=\"password\"\r\n                        aria-describedby=\"basic-addon1\"\r\n                        onChange={changeHandler}\r\n                    />\r\n                </InputGroup>\r\n                <Button\r\n                    onClick={loginHandler}\r\n                    disabled={loading}\r\n                >login</Button>\r\n                <Button\r\n                    onClick={registerHandler}\r\n                    disabled={loading}\r\n                >sign up</Button>\r\n            </Card.Body>\r\n        </Card>\r\n    </Container>\r\n    )\r\n};","import {useCallback} from \"react\";\r\n\r\nexport const useMessage = () =>{\r\n    return useCallback(text=>{\r\n        if(text){\r\n           alert(text)\r\n        }\r\n    },[])\r\n}","import React, {useContext, useState} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {Container, FormControl} from \"react-bootstrap\";\r\n\r\n\r\n\r\n\r\n\r\nexport const CreatePage = () => {\r\n    const auth = useContext(AuthContext);\r\n    const history = useHistory()\r\n    const{request} = useHttp()\r\n    const[link,setLink]=useState('');\r\n\r\n\r\n\r\n    const pressHandler = async event => {\r\n        if(event.key === \"Enter\"){\r\n            try{\r\n             const data = await request('/api/link/generate','POST',{from: link},{Authorization: `Bearer ${auth.token}`})\r\n              history.push(`/detail/${data.link._id}`)\r\n                console.log(data.link._id)\r\n            }catch (e) {}\r\n        }\r\n    }\r\n\r\n\r\n    return(\r\n        <Container>\r\n            <FormControl\r\n            placeholder=\"put link\"\r\n            id=\"link\"\r\n            value={link}\r\n            onChange={e => setLink(e.target.value)}\r\n            onKeyPress={pressHandler}\r\n\r\n            />\r\n        </Container>\r\n\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Container} from \"react-bootstrap\";\r\n\r\n\r\nexport const LinkCard = ({link}) => {\r\n    return(\r\n       <Container>\r\n            <h1>link</h1>\r\n            <p>original link: <a href={link.to}>{link.from}</a></p>\r\n            <p>short link : <a href={link.from}>{link.to}</a></p>\r\n            <p>clicks : <strong>{link.clicks}</strong> </p>\r\n            <p>create date: <strong>{new Date(link.date).toLocaleDateString()}</strong></p>\r\n       </Container>\r\n    )\r\n}","import React, {useCallback, useContext, useEffect, useState} from \"react\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport {LinkCard} from \"../components/LinkCard\";\r\nimport {Container} from \"react-bootstrap\";\r\n\r\n\r\nexport const DetailPage = () => {\r\n    const [link,setLink] = useState([])\r\n    const {loading,request} =useHttp()\r\n    const {token} = useContext(AuthContext)\r\n    const linkId = useParams().id\r\n\r\n    const getLink = useCallback(async () =>{\r\n        try{\r\n          const fetched = await request(`/api/link/${linkId}`,\"GET\",null,{Authorization: `Bearer ${token}`})\r\n            setLink(fetched)\r\n        }catch (e) {}\r\n    },[token,request,linkId])\r\n\r\n    useEffect(() =>{\r\n        getLink()\r\n    },[getLink])\r\n\r\n    if(loading){\r\n        return (\r\n            <Container>\r\n                <h1>loading</h1>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <LinkCard\r\n        link={link}\r\n        />\r\n    )\r\n};","import React from \"react\";\r\nimport {Container, Table} from \"react-bootstrap\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport const LinksList = ({links}) =>{\r\n    return(\r\n        <Container>\r\n        <Table >\r\n            <thead>\r\n            <tr>\r\n                <th>N</th>\r\n                <th>Original Link</th>\r\n                <th>Shorted Link</th>\r\n                <th></th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n            {links.map((link,index) => {\r\n                return(\r\n                    <tr key={link._id}>\r\n                        <td>{index + 1}</td>\r\n                        <td>{link.from}</td>\r\n                        <td>{link.to}</td>\r\n                        <td><Link to={`/detail/${link._id}`}>Open</Link></td>\r\n                    </tr>\r\n                )\r\n                }\r\n            )\r\n            }\r\n            </tbody>\r\n        </Table>\r\n        </Container>\r\n    )\r\n}","import React, {useCallback, useContext, useEffect, useState} from \"react\";\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {LinksList} from \"../components/LinksList\";\r\nimport {Container} from \"react-bootstrap\";\r\n\r\n\r\nexport const LinksPage =  () => {\r\n    const [links,setLinks]= useState([])\r\n    const {token}= useContext(AuthContext)\r\n    const {request,loading} =useHttp()\r\n\r\n    const fetchLinks = useCallback(async ()=>{\r\n            try{\r\n            const fetched = await request(`/api/link`,\"GET\",null,{Authorization: `Bearer ${token}`})\r\n                setLinks(fetched)\r\n             }catch (e) {}\r\n        },[token,request])\r\n    useEffect(()=>{\r\n        fetchLinks()\r\n    },[fetchLinks])\r\n\r\n    if(loading){\r\n        return (\r\n            <Container>\r\n                <h1>loading</h1>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n           <LinksList\r\n           links={links}\r\n           />\r\n        </>\r\n    )\r\n}\r\n","import React, {useContext, useState} from \"react\";\r\nimport {Navbar, Nav, Button, FormControl, Container, Card} from \"react-bootstrap\"\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport{useHistory} from \"react-router-dom\";\r\n// import {useHttp} from \"../hooks/http.hook\";\r\n\r\n\r\n\r\n\r\n\r\nexport const NavBar = () => {\r\n        // const {request}= useHttp()\r\n\r\n        const auth = useContext(AuthContext);\r\n        const history = useHistory();\r\n\r\n\r\n\r\n        const logouthandler = event => {\r\n        event.preventDefault();\r\n        auth.logout();\r\n        history.push('/')\r\n         };\r\n         return(\r\n        <Container>\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n            <Navbar.Brand href=\"/create\"><img width=\"30px\" src=\"https://www.festivalclaca.cat/pics/b/3/39911_smiley-face-clipart-png.png\" alt=\"\"/></Navbar.Brand>\r\n            <Nav className=\"mr-auto\">\r\n                <Nav.Link href=\"/create\">Create</Nav.Link>\r\n                <Nav.Link href=\"/links\">My Links</Nav.Link>\r\n                {/*<Nav.Link href=\"/detail\">Pricing</Nav.Link>*/}\r\n            </Nav>\r\n\r\n            <Button variant=\"outline-info\" onClick={logouthandler}>logout</Button>\r\n        </Navbar>\r\n        </Container>\r\n    )\r\n};","import React from 'react';\nimport {useRouts} from \"./routs\";\nimport {BrowserRouter as Router} from\"react-router-dom\";\nimport {useAuth} from \"./hooks/auth.hook\";\nimport {AuthContext} from \"./context/AuthContext\";\nimport {NavBar} from \"./components/navbar.js\";\n\n\n\nfunction App() {\n    const {token,userId,login,logout}=useAuth();\n    const isAuthenticated = !!token;\n    const routes = useRouts(isAuthenticated);\n\n  return (\n      <AuthContext.Provider value={{token,userId,login,logout,isAuthenticated}}>\n\n          <Router>\n              {isAuthenticated && <NavBar/>}\n              {routes}\n          </Router>\n      </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","import {useState,useCallback,useEffect} from \"react\";\r\n\r\nconst storageName = \"userData\";\r\n\r\nexport const useAuth =()=>{\r\n    const[token,setToken]=useState(null);\r\n    const[userId,setUserId]=useState(null);\r\n\r\n    const login = useCallback((jwtToken,id)=>{\r\n        setToken(jwtToken)\r\n        setUserId(id)\r\n        localStorage.setItem(storageName,JSON.stringify({userId: id,token: jwtToken}))\r\n\r\n    },[]);\r\n    const logout = useCallback(()=>{\r\n        setUserId(null)\r\n        setToken(null)\r\n        localStorage.removeItem(storageName)\r\n    },[]);\r\n    useEffect(() => {\r\n        const data = JSON.parse(localStorage.getItem(storageName))\r\n        if(data && data.token){\r\n            login(data.token,data.userId)\r\n        }\r\n    },[login])\r\n\r\n    return {login,logout,userId,token}\r\n};","import React from \"react\";\r\nimport {Route,Switch,Redirect} from \"react-router-dom\";\r\nimport {AuthPage} from \"./Pages/AuthPage\";\r\nimport {CreatePage} from \"./Pages/CreatePage\";\r\nimport {DetailPage} from \"./Pages/DetailPage\";\r\nimport {LinksPage} from \"./Pages/LinksPage\";\r\n\r\n\r\nexport const useRouts = isAuthenticated => {\r\n    if(isAuthenticated){\r\n        return(\r\n            <Switch>\r\n                <Route path=\"/create\" exact>\r\n                    <CreatePage/>\r\n                </Route>\r\n                <Route path=\"/links\" exact>\r\n                    <LinksPage/>\r\n                </Route>\r\n                <Route path=\"/detail/:id\">\r\n                    <DetailPage/>\r\n                </Route>\r\n                <Redirect to =\"/create\"/>\r\n            </Switch>\r\n        )\r\n    }\r\n    return (\r\n        <Switch>\r\n            <Route path=\"/\">\r\n                <AuthPage/>\r\n            </Route>\r\n        </Switch>\r\n    )\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}